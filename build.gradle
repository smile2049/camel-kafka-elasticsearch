buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id 'net.researchgate.release' version '2.6.0'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'io.codearte.nexus-staging' version '0.9.0'
    id 'com.palantir.docker' version '0.13.0'
    id 'org.dm.bundle' version '0.10.0'
}

ext {
    name = 'Camel Kafka Elasticsearch'
    description = 'A Camel LDP implementation'
    vendor = 'pandorasystems'
    homepage = 'http://www.trellisldp.org'
    url = 'http://www.trellisldp.org/apidocs'
    license = 'Apache 2'
    inceptionYear = '2017'
}

configurations {
    buildToolsConfig
}

dependencies {
    buildToolsConfig 'org.trellisldp:trellis-build-tools:0.2.0'
}

task processBuildTools(type: Copy) {
    from {
        configurations.buildToolsConfig.collect {
            zipTree(it).matching {
                include 'checkstyle/*.xml'
                include 'license/*.txt'
            }
        }
    }
    into 'build'
}

configure(allprojects) { project ->
    apply plugin: 'application'
    apply plugin: 'checkstyle'
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.dm.bundle'
    apply plugin: 'com.github.hierynomus.license'

    group = 'org.trellisldp.camel'
    mainClassName = 'org.trellisldp.camel.kafka.elasticsearch.KafkaEventConsumer'

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs.add("-Xlint:unchecked")
            options.compilerArgs.add("-Xlint:deprecation")
        }
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
        options.compilerArgs += "-parameters"
    }

    ext {
        camelVersion = '2.20.0'
        camelLdpVersion = '0.1.0'
        jacksonVersion = "2.9.0"
        elasticsearchVersion = "6.2.2"

        /* Testing */
        junitVersion = '5.0.1'
        junitPlatformVersion = '1.0.1'
        jaxbVersion = '2.3.0'
        jacocoVersion = '0.7.9'
        logbackVersion = '1.2.3'
        apiguardianVersion = '1.0.0'

        camelVersionRange = '[2.16,3)'
        projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")
        defaultOsgiImports = 'org.osgi.service.blueprint;version="[1,2)",*'
    }

    processResources {
        filesNotMatching(["**/*.sh", "**/*.jar", "**/*.tar", "**/*.xml"]) {
            expand(project.properties)
        }
    }

    def dockerResourceDir = "${rootProject.buildDir}/resources/main/docker"

    docker {
        name 'trellisldp/activitystream-elasticsearch'
        tags "${version}"
        dockerfile file("${dockerResourceDir}/Dockerfile")
        files "activitystream-elasticsearch/build/distributions/activitystream-elasticsearch-${version}.tar",
                "${dockerResourceDir}/entrypoint.sh"
        // copySpec.from("${buildDir}/maven").into("${mavenInstallPath}")
        pull true
        noCache true
    }

    license {
        include "**/*.java"
        header rootProject.file('build/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    checkstyle {
        configFile = rootProject.file('build/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('build/checkstyle/')
        toolVersion = '8.1'
    }

    checkstyleMain.dependsOn processBuildTools
}

configure(subprojects) { subproject ->
    apply plugin: 'com.bmuschko.nexus'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    task deleteSubprojectFiles(type: Delete) {
        delete "${projectDir}/settings.gradle", "${projectDir}/docs"
    }

    task processConfig(type: Copy) {
        from('src/main/resources/cfg') {
            include '**/*.cfg'
        }
        into 'build/cfg/main'
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourceJar
        sourceSets.main.output
    }

    classes {
        classes.dependsOn processConfig
    }

    jacoco {
        toolVersion = "0.8.0"
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                url "${rootProject.buildDir}/maven"
            }
        }
    }

    modifyPom {
        //noinspection GroovyAssignabilityCheck
        project {
            name name
            description description
            url url
            inceptionYear inceptionYear

            organization {
                name vendor
                url homepage
            }

            developers {
                developer {
                    id 'christopher-johnson'
                    name 'Christopher Johnson'
                    email 'chjohnson @ (domain of organization url)'
                    organization ''
                    organizationUrl ''
                    roles {
                        role 'developer'
                    }
                    timezone '+1'
                }
            }

            scm {
                connection 'scm:git:git://github.com/ub-leipzig/camel-kafka-elasticsearch-dataset.git'
                developerConnection 'scm:git:git@github.com/ub-leipzig/camel-kafka-elasticsearch-dataset.git'
                url 'https://github.com/ub-leipzig/camel-kafka-elasticsearch-dataset/'
                tag 'HEAD'
            }

            licenses {
                license {
                    name 'Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                }
            }
        }
    }

    nexusStaging {
        packageGroup = "cool.pandora"
        stagingProfileId = "4d5f13c386f543"
    }

    nexus {
        sign = true
        repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }

    javadoc {
        doFirst {
            options.addStringOption('-module-path', classpath.asPath)
            options.addBooleanOption('html5', true)
        }
        destinationDir = new File(projectDir, "docs/${version}")
        options {
            links "https://docs.oracle.com/javase/8/docs/api/"
        }
    }
}

project("activitystream-elasticsearch") {
    description = 'A Camel Kafka service'
    dependencies {
        compile group: 'net.java.dev.jna', name: 'jna', version: '4.5.1'
        compile group: 'javax.activation', name: 'activation', version: '1.1.1'
        compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
        compile group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: elasticsearchVersion
        implementation group: 'org.apache.camel', name: 'camel-core', version: camelVersion
        implementation group: 'org.trellisldp', name: 'camel-ldp', version: camelLdpVersion
        implementation group: 'org.apache.camel', name: 'camel-kafka', version: camelVersion
        implementation group: 'org.apache.camel', name: 'camel-jackson', version: camelVersion
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
        testImplementation group: 'org.apache.camel', name: 'camel-http4', version: camelVersion
        testImplementation group: 'org.apache.camel', name: 'camel-kafka', version: camelVersion
        testImplementation group: 'org.apache.camel', name: 'camel-jackson', version: camelVersion
        testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: junitPlatformVersion
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
        testImplementation group: 'org.apache.camel', name: 'camel-test', version: camelVersion
        testImplementation group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbVersion
        testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    }

    jar {
        manifest {
            attributes 'Import-Package': "org.apache.camel,${defaultOsgiImports}",
                    'Export-Package': "org.trellisldp.camel.kafka.elasticsearch.dataset;version=${projectOsgiVersion}"
        }
    }

    artifacts {
        archives(file('build/cfg/main/org.trellisldp.camel.kafka.elasticsearch.cfg')) {
            classifier 'configuration'
            type 'cfg'
        }
    }
}


